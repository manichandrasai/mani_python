#  Write a program "count_digits.py" to print the number of digits in the given number.
n = input("enter a num :")
count = 0
for i in n:
    if i.isdigit():
        count+= 1
print(f"the number of digits in the given number is {count}")        


# Write a program "num_identifier.py" that will print whether the number is a single digit number or double digit number or big number.
# If given number is one digit number, print "Single digit number"
# If given number is two digit number, print "Double digit number"
# If number is three digit number or bigger, print "Big number"

n = int(input("enter a num:"))
if (n <= 9):
    print("single digit number")
if (n > 9 and n <= 99):
    print("double digit number")
if (n > 99):
    print("big number")            


# Write a program "list_grouping.py" that takes a list and splits into smaller lists of given size. For example,
# if lst = [1, 2, 3, 4, 5, 6], size = 2, it should return [[1, 2], [3,4], [5,6]] and
# # if lst = [1,2,3,4,5,6,7,8,9], size = 4 then it should return [[1,2,3,4],[5,6,7,8],[9]].     

m = []
n = int(input("enter a num:"))
for i in range(n):
    v = int(input("enter a num:"))
    m.append(v)
print(m)
size = int(input("enter a num:"))
n = []
for i in range(0,len(m),size):
    n.append(m[i:i+size])
print(n)    


# 4. Write a program "dups.py" to print a list with all duplicates in the given list. For example, if lst=[1, 3, 2, 1, 2, 5, 6] it should return [1, 2]
m = []
n = int(input("enter a num:"))
for i in range(n):
    v = int(input("enter a num:"))
    m.append(v)
print(m)
n = []
for i in m:
    if m.count(i)!= 1 and i not in n:
        n.append(i)
print(n)        

#  Write a program "list_reverse.py" to  reverse a list without using list slicing?

m = []
n = int(input("enter a num:"))
for i in range(n):
    v = int(input("enter a num:"))
    m.append(v)
print(m)
n = []
for i in range(len(m)):
    temp = m.pop()
    n.append(temp)
print(n)    

# Write a program "nearly_equal.py" to check whether two given strings are nearly equal. Two strings a and b are nearly equal when a can be generated by a single mutation on b. 
# For example,
# if str1="'python", str2="'perl", it should return False, 
# if  str1="'python", str2="jython", it should return True, and
# if  str1="man", str2="'woman", it should return False.
str1 = input("enter a string:")
str2 = input("enter a string:")
if ((len(str1))!= (len(str2))):
    print("False")
count = 0
for i in  range(len(str1)):
    if str1[i]!= str2[i]:
        count += 1
if count == 1:
    print("True")
else:
    print("False")                    

# Write a program "list_anagrams.py" to find anagrams in a given list of words. Two words are called anagrams if one word can be formed by rearranging letters of another. For example 'eat', 'ate' and 'tea' are anagrams.
# Assume the list given is ['eat', 'ate', 'done', 'tea', 'soup', 'node'] then it should return [['eat','ate','tea], ['done','node'], ['soup']]
l = ['eat', 'ate', 'done', 'tea', 'soup', 'node']
m = {}
for string in l:
    sorted_string = str(sorted(string))
    if sorted_string  in m:
        m[sorted_string].append(string)
    else:
        m[sorted_string] = [string]
print(list(m.values()))            

# Write a program "invert_dict.py" to interchange keys and values in a dictionary. For example, if the given dictionary is {'x':1,'y':2,'z':3}, it should return {1:'x',2:'y',3:'z'}.
d = {'x':1,'y':2,'z':3}
m = {}
for key in d:
        value = d[key]
        m[value] = key
print(m)
